name: Publish Release

on:
  push:
    branches:
      - release/latest

permissions:
  contents: write
  packages: write

jobs:
  bump-tag-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Git for pushing
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Bump patch version in all .csproj files
      id: versioning
      run: |
        csproj=$(find . -name '*.csproj' ! -name '*.Tests.csproj' | head -n 1)
        echo "üìÑ Found project file: $csproj"

        current=$(grep -oPm1 "(?<=<Version>)[^<]+" "$csproj")
        echo "üì¶ Current version: $current"

        IFS='.' read -r major minor patch <<< "$current"
        patch=$((patch + 1))
        newVersion="$major.$minor.$patch"

        echo "üîñ New version: $newVersion"
        echo "version=$newVersion" >> $GITHUB_OUTPUT

        for f in $(find . -name '*.csproj' ! -name '*.Tests.csproj'); do
          echo "üîß Updating $f"
          sed -i "s|<Version>.*</Version>|<Version>$newVersion</Version>|" "$f"
        done

        git add .
        git commit -m "üîñ Release v$newVersion"
        git tag "v$newVersion"
        git push origin release/latest --follow-tags

  pack-and-publish:
    needs: bump-tag-and-release
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://nuget.org

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Restore Dependencies
      run: dotnet restore Bhengu.Finance.Payments.sln

    - name: Build Solution
      run: dotnet build Bhengu.Finance.Payments.sln --configuration Release --no-restore

    - name: Pack NuGet Projects
      run: |
        mkdir -p ./nupkgs
        for f in $(find . -name '*.csproj' ! -name '*.Tests.csproj'); do
          if grep -q '<IsPackable>true</IsPackable>' "$f"; then
            echo "üì¶ Packing $f"
            dotnet pack "$f" -c Release -o ./nupkgs
          else
            echo "‚ö†Ô∏è Skipping non-packable project: $f"
          fi
        done

    - name: Publish NuGet Packages
      run: |
        for pkg in ./nupkgs/*.nupkg; do
          echo "üì§ Publishing $pkg"
          dotnet nuget push "$pkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    - name: Generate JSON changelog
      run: |
        git log -n 20 --pretty=format:'{"commit": "%H", "author": "%an", "message": "%s"},' | sed '$ s/,$//' | jq -s . > changelog.json
        echo "üìù Generated changelog.json"

    - name: Upload changelog to GitHub Release
      run: |
        version=${{ needs.bump-tag-and-release.outputs.version }}
        gh release upload "v$version" changelog.json --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
