name: Auto Version + Pack + Publish

on:
  push:
    branches:
      - master

jobs:
  bump-tag-and-release:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.versioning.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Bump patch version in all non-test .csproj files
      id: versioning
      run: |
        newVersion=""
        for csproj in $(find . -name '*.csproj' ! -name '*.Tests.csproj'); do
          current=$(grep -oPm1 "(?<=<Version>)[^<]+" "$csproj")
          IFS='.' read -r major minor patch <<< "$current"
          patch=$((patch + 1))
          version="$major.$minor.$patch"
          sed -i "s|<Version>.*</Version>|<Version>$version</Version>|" "$csproj"
          echo "ðŸ“¦ Updated $csproj to version $version"
          newVersion=$version
        done
        echo "version=$newVersion" >> $GITHUB_OUTPUT

    - name: Commit and tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "ðŸ”– Auto-release version ${{ steps.versioning.outputs.version }}"
        git tag "v${{ steps.versioning.outputs.version }}"
        git push origin master --follow-tags

  create-release:
    needs: bump-tag-and-release
    runs-on: ubuntu-latest
    steps:
    - name: Generate JSON Changelog
      run: |
        echo "{\"version\": \"${{ needs.bump-tag-and-release.outputs.version }}\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > changelog.json

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.bump-tag-and-release.outputs.version }}
        name: v${{ needs.bump-tag-and-release.outputs.version }}
        files: changelog.json
        body: |
          Automated release for v${{ needs.bump-tag-and-release.outputs.version }}

  pack-and-publish:
    needs: bump-tag-and-release
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://nuget.org

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Restore Dependencies
      run: |
        for csproj in $(find . -name '*.csproj' ! -name '*.Tests.csproj'); do
          dotnet restore "$csproj"
        done

    - name: Build Projects
      run: |
        for csproj in $(find . -name '*.csproj' ! -name '*.Tests.csproj'); do
          dotnet build "$csproj" --configuration Release --no-restore
        done

    - name: Pack NuGet Projects
      run: |
        mkdir -p ./nupkgs
        for csproj in $(find . -name '*.csproj' ! -name '*.Tests.csproj'); do
          dotnet pack "$csproj" -c Release -o ./nupkgs
        done

    - name: Publish All NuGets
      run: |
        for file in ./nupkgs/*.nupkg; do
          dotnet nuget push "$file" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
